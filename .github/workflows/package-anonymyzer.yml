name: Build PostgreSQL Anonymizer Package

on:
  workflow_dispatch:
    inputs:
      anon_version:
        description: 'postgresql_anonymizer version'
        required: true
        default: '2.0.0'
      pgrx_version:
        description: 'cargo-pgrx version'
        required: false
        default: '0.12.9'
  schedule:
    # Check for new version monthly
    - cron: '0 0 20 * *'

jobs:
  build-anonymizer:
    runs-on: ubuntu-24.04-arm
    
    steps:
      - name: Set up environment
        run: |
          echo 'deb [trusted=yes] https://repo.goreleaser.com/apt/ /' | sudo tee /etc/apt/sources.list.d/goreleaser.list
          wget -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
          echo "deb http://apt.postgresql.org/pub/repos/apt noble-pgdg main" | sudo tee /etc/apt/sources.list.d/pgdg.list
          sudo apt-get update
          sudo apt-get install -y build-essential postgresql-server-dev-17 libpq-dev gnupg git dpkg-dev apt-utils gzip gettext-base nfpm

      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ppa
          persist-credentials: false
          fetch-depth: 1

      - name: Install Rust
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          source "$HOME/.cargo/env"

      - name: Install Cargo Pgrx
        run: |
          source "$HOME/.cargo/env"
          cargo install cargo-pgrx --version ${{ github.event.inputs.pgrx_version || '0.12.9' }} --locked
          cargo pgrx init --pg17 /usr/lib/postgresql/17/bin/pg_config

      - name: Clone postgresql_anonymizer repository
        run: |
          git clone https://gitlab.com/dalibo/postgresql_anonymizer.git
          cd postgresql_anonymizer
          git checkout v${{ github.event.inputs.anon_version || '2.0.0' }}

      - name: Build postgresql_anonymizer extension
        run: |
          cd postgresql_anonymizer
          make extension
        env:
          PG_CONFIG: /usr/lib/postgresql/17/bin/pg_config
          PGVER: pg17
          PG_MAJOR_VERSION: 17 

      - name: Build Debian package
        run: |
          cd postgresql_anonymizer

          # Update architecture in nfpm.yaml
          sed -i 's/arch: "amd64"/arch: "arm64"/' nfpm.template.yaml

          make deb PGVER=pg17 PG_MAJOR_VERSION=17
          # Copy the resulting .deb file to the repository root
          cp target/release/anon-pg17/*.deb ..
        env:
          PG_CONFIG: /usr/lib/postgresql/17/bin/pg_config
          PGVER: pg17
          PG_MAJOR_VERSION: 17 

      - name: List downloaded packages
        run: git status

      - name: Import GPG key
        env:
          PPA_PRIVATE_KEY: ${{ secrets.PPA_PRIVATE_KEY }}
          PPA_PASSWORD: ${{ secrets.PPA_PASSWORD }}
        run: |
          echo "$PPA_PRIVATE_KEY" | gpg --batch --import

      - name: Create PPA release
        env:
          PPA_EMAIL: ${{ secrets.PPA_EMAIL }}
        run: |
          # Generate Packages file
          dpkg-scanpackages --multiversion . > Packages
          gzip -k -f Packages
          
          # Generate Release file
          apt-ftparchive release . > Release
          
          # Sign Release file
          gpg --batch --pinentry-mode loopback --passphrase "${{ secrets.PPA_PASSWORD }}" --default-key "${{ secrets.PPA_EMAIL }}" -abs -o - Release > Release.gpg
          
          # Create InRelease file (clearsigned Release)
          gpg --batch --pinentry-mode loopback --passphrase "${{ secrets.PPA_PASSWORD }}" --default-key "$PPA_EMAIL" --clearsign -o - Release > InRelease

      - name: Commit and push packages
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          git add *.deb Packages Release Release.gpg InRelease
          git commit -m "Add postgresql_anonymizer package"
          
      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ppa
