name: Build PostgreSQL 17 Packages

on:
  workflow_dispatch:
    inputs:
      postgres_version:
        description: 'PostgreSQL version'
        required: true
        default: '17.4'
  schedule:
    # Check for new PostgreSQL releases monthly
    - cron: '0 0 1 * *'

jobs:
  build:
    runs-on: ubuntu-24.04-arm
    container:
      image: ubuntu:24.04
      options: --privileged

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up environment
        run: |
          echo "MIRRORSITE=http://archive.ubuntu.com/ubuntu" > /etc/pbuilderrc
          apt-get update
          apt-get install -y build-essential devscripts debhelper git-buildpackage curl gnupg reprepro dpkg-dev lintian \
                             clang-18 llvm-18 lld-18 \
                             postgresql-server-dev-all libreadline-dev zlib1g-dev libssl-dev libpam0g-dev libxml2-dev \
                             libkrb5-dev libldap2-dev libperl-dev python3-dev tcl-dev libecpg-dev gettext \
                             bison clang dh-exec docbook-xml docbook-xsl flex gdb liblz4-dev \
                             libselinux1-dev libsystemd-dev libxml2-utils libxslt1-dev libzstd-dev llvm-dev \
                             lz4 pkgconf systemtap-sdt-dev uuid-dev xsltproc
          
          # Install postgresql-common-dev from Plucky (backported to Noble)
          curl -O http://archive.ubuntu.com/ubuntu/pool/main/p/postgresql-common/postgresql-common-dev_274_all.deb
          apt-get install -y ./postgresql-common-dev_274_all.deb
          
          # Handle tzdata dependency (tzdata-legacy or tzdata < 2023c-8)
          if apt-cache show tzdata-legacy &>/dev/null; then
            apt-get install -y tzdata-legacy
          else
            apt-get install -y tzdata
          fi
          
      - name: Get latest PostgreSQL 17 version
        run: |
          if [ "${{ github.event.inputs.postgres_version }}" != "" ]; then
            POSTGRES_VERSION="${{ github.event.inputs.postgres_version }}"
          else
            # Get latest PostgreSQL 17 version from the PostgreSQL website
            POSTGRES_VERSION=$(curl -s https://www.postgresql.org/ftp/source/ | grep -oP 'v17\.\d+' | sort -V | tail -n 1 | sed 's/v//')
          fi
          echo "POSTGRES_VERSION=$POSTGRES_VERSION" >> $GITHUB_ENV
          
      - name: Clone PostgreSQL Debian packaging
        run: |
          git clone https://salsa.debian.org/postgresql/postgresql.git
          cd postgresql
          # Ensure we're on a branch that supports PostgreSQL 17
          git checkout 17
          
      - name: Download PostgreSQL source
        run: |
          cd postgresql
          # Download the PostgreSQL source
          curl -O https://ftp.postgresql.org/pub/source/v${POSTGRES_VERSION}/postgresql-${POSTGRES_VERSION}.tar.bz2
          # Update version in changelog
          dch -v ${POSTGRES_VERSION}-3custom "Custom build of PostgreSQL ${POSTGRES_VERSION} with clang-18 for Ubuntu 24.04"
          
      - name: Build PostgreSQL packages
        run: |
          cd postgresql
          # Extract the PostgreSQL source
          tar -xf postgresql-${POSTGRES_VERSION}.tar.bz2
          # Copy files to create orig tarball
          cp -r postgresql-${POSTGRES_VERSION}/* .
          # Remove the extracted directory
          rm -rf postgresql-${POSTGRES_VERSION}
          
          # Create a custom copy of postgresql.mk with our additional block size flags
          PGCOMMON_MK="/usr/share/postgresql-common/server/postgresql.mk"
          if [ -f "$PGCOMMON_MK" ]; then
            # Create a backup of the original file
            cp "$PGCOMMON_MK" "${PGCOMMON_MK}.bak"
            
            # Append our custom flags to CONFIGURE_FLAGS
            sed -i 's/CONFIGURE_FLAGS += --enable-tap-tests/CONFIGURE_FLAGS += --enable-tap-tests\n  CONFIGURE_FLAGS += --with-blocksize=16\n  CONFIGURE_FLAGS += --with-wal-blocksize=16\n/' "$PGCOMMON_MK"
            cat "$PGCOMMON_MK"
            
            echo "Added custom block size flags to postgresql.mk"
          else
            echo "Warning: Could not find postgresql.mk at $PGCOMMON_MK"
            exit 1
          fi
          
          # Build Debian packages with custom compiler and flags
          DEB_BUILD_OPTIONS="nocheck" dpkg-buildpackage -us -uc -b

      - name: Gather packages
        run: |
          mkdir -p dist/deb
          ls -l
          find . -name "*.deb" -exec cp {} dist/deb/ \;
          find . -name "*.changes" -exec cp {} dist/deb/ \;
    
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: postgresql-packages
          path: dist/deb/          

  publish-ppa:
    needs: build
    runs-on: ubuntu-latest
    container:
      image: ubuntu:24.04
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ppa
          fetch-depth: 0

      - name: Set up environment
        run: |
          apt-get update
          apt-get install -y gnupg git dpkg-dev apt-utils gzip apt-ftparchive

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: postgresql-packages
          path: ./packages

      - name: Import GPG key
        env:
          PPA_PRIVATE_KEY: ${{ secrets.PPA_PRIVATE_KEY }}
          PPA_PASSWORD: ${{ secrets.PPA_PASSWORD }}
        run: |
          echo "$PPA_PRIVATE_KEY" | gpg --batch --import
          # Trust the key
          echo -e "trust\n5\ny\n" | gpg --batch --command-fd 0 --edit-key ${{ secrets.PPA_EMAIL }}

      - name: Create repository files
        env:
          PPA_EMAIL: ${{ secrets.PPA_EMAIL }}
        run: |
          cp -r packages/* .
          rm -rf packages

          # Generate Packages file
          dpkg-scanpackages --multiversion . > Packages
          gzip -k -f Packages
          
          # Generate Release file
          apt-ftparchive release . > Release
          
          # Sign Release file
          cat Release | gpg --default-key "$PPA_EMAIL" --passphrase "${{ secrets.PPA_PASSWORD }}" -abs -o Release.gpg
          
          # Create InRelease file (clearsigned Release)
          cat Release | gpg --default-key "$PPA_EMAIL" --passphrase "${{ secrets.PPA_PASSWORD }}" --clearsign -o InRelease

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Commit and push changes
        run: |
          # Add all new files
          git add ppa/*
          
          # Get current PostgreSQL version
          POSTGRES_VERSION=${{ github.event.inputs.postgres_version || env.POSTGRES_VERSION }}
          
          # Commit changes
          git commit -m "Update PPA with PostgreSQL ${POSTGRES_VERSION} packages"
          
          # Push to ppa branch
          git push origin ppa